// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ChatClient is the client API for Chat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatClient interface {
	// Bidirectional Streaming RPC
	Chat(ctx context.Context, opts ...grpc.CallOption) (Chat_ChatClient, error)
	// Server Streaming RPC
	Spectator(ctx context.Context, in *SpectatorRequest, opts ...grpc.CallOption) (Chat_SpectatorClient, error)
	// Client Streaming RPC
	Speecher(ctx context.Context, opts ...grpc.CallOption) (Chat_SpeecherClient, error)
	// Urary RPC
	Speak(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*SpeakResponse, error)
}

type chatClient struct {
	cc grpc.ClientConnInterface
}

func NewChatClient(cc grpc.ClientConnInterface) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) Chat(ctx context.Context, opts ...grpc.CallOption) (Chat_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Chat_serviceDesc.Streams[0], "/chat.Chat/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatChatClient{stream}
	return x, nil
}

type Chat_ChatClient interface {
	Send(*ChatRequest) error
	Recv() (*ChatReply, error)
	grpc.ClientStream
}

type chatChatClient struct {
	grpc.ClientStream
}

func (x *chatChatClient) Send(m *ChatRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatChatClient) Recv() (*ChatReply, error) {
	m := new(ChatReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatClient) Spectator(ctx context.Context, in *SpectatorRequest, opts ...grpc.CallOption) (Chat_SpectatorClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Chat_serviceDesc.Streams[1], "/chat.Chat/Spectator", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatSpectatorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Chat_SpectatorClient interface {
	Recv() (*ChatReply, error)
	grpc.ClientStream
}

type chatSpectatorClient struct {
	grpc.ClientStream
}

func (x *chatSpectatorClient) Recv() (*ChatReply, error) {
	m := new(ChatReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatClient) Speecher(ctx context.Context, opts ...grpc.CallOption) (Chat_SpeecherClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Chat_serviceDesc.Streams[2], "/chat.Chat/Speecher", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatSpeecherClient{stream}
	return x, nil
}

type Chat_SpeecherClient interface {
	Send(*ChatRequest) error
	CloseAndRecv() (*SpeecherResponse, error)
	grpc.ClientStream
}

type chatSpeecherClient struct {
	grpc.ClientStream
}

func (x *chatSpeecherClient) Send(m *ChatRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatSpeecherClient) CloseAndRecv() (*SpeecherResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SpeecherResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatClient) Speak(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*SpeakResponse, error) {
	out := new(SpeakResponse)
	err := c.cc.Invoke(ctx, "/chat.Chat/Speak", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServer is the server API for Chat service.
// All implementations must embed UnimplementedChatServer
// for forward compatibility
type ChatServer interface {
	// Bidirectional Streaming RPC
	Chat(Chat_ChatServer) error
	// Server Streaming RPC
	Spectator(*SpectatorRequest, Chat_SpectatorServer) error
	// Client Streaming RPC
	Speecher(Chat_SpeecherServer) error
	// Urary RPC
	Speak(context.Context, *ChatRequest) (*SpeakResponse, error)
	mustEmbedUnimplementedChatServer()
}

// UnimplementedChatServer must be embedded to have forward compatible implementations.
type UnimplementedChatServer struct {
}

func (UnimplementedChatServer) Chat(Chat_ChatServer) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedChatServer) Spectator(*SpectatorRequest, Chat_SpectatorServer) error {
	return status.Errorf(codes.Unimplemented, "method Spectator not implemented")
}
func (UnimplementedChatServer) Speecher(Chat_SpeecherServer) error {
	return status.Errorf(codes.Unimplemented, "method Speecher not implemented")
}
func (UnimplementedChatServer) Speak(context.Context, *ChatRequest) (*SpeakResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Speak not implemented")
}
func (UnimplementedChatServer) mustEmbedUnimplementedChatServer() {}

// UnsafeChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServer will
// result in compilation errors.
type UnsafeChatServer interface {
	mustEmbedUnimplementedChatServer()
}

func RegisterChatServer(s grpc.ServiceRegistrar, srv ChatServer) {
	s.RegisterService(&_Chat_serviceDesc, srv)
}

func _Chat_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServer).Chat(&chatChatServer{stream})
}

type Chat_ChatServer interface {
	Send(*ChatReply) error
	Recv() (*ChatRequest, error)
	grpc.ServerStream
}

type chatChatServer struct {
	grpc.ServerStream
}

func (x *chatChatServer) Send(m *ChatReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatChatServer) Recv() (*ChatRequest, error) {
	m := new(ChatRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Chat_Spectator_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SpectatorRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServer).Spectator(m, &chatSpectatorServer{stream})
}

type Chat_SpectatorServer interface {
	Send(*ChatReply) error
	grpc.ServerStream
}

type chatSpectatorServer struct {
	grpc.ServerStream
}

func (x *chatSpectatorServer) Send(m *ChatReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Chat_Speecher_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServer).Speecher(&chatSpeecherServer{stream})
}

type Chat_SpeecherServer interface {
	SendAndClose(*SpeecherResponse) error
	Recv() (*ChatRequest, error)
	grpc.ServerStream
}

type chatSpeecherServer struct {
	grpc.ServerStream
}

func (x *chatSpeecherServer) SendAndClose(m *SpeecherResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatSpeecherServer) Recv() (*ChatRequest, error) {
	m := new(ChatRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Chat_Speak_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).Speak(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.Chat/Speak",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).Speak(ctx, req.(*ChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Chat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Speak",
			Handler:    _Chat_Speak_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _Chat_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Spectator",
			Handler:       _Chat_Spectator_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Speecher",
			Handler:       _Chat_Speecher_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "chat.proto",
}
